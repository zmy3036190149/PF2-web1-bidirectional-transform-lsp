/*
 * generated by Xtext 2.13.0
 */
package pf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import pf.pf.Link;
import pf.pf.Node;
import pf.pf.PfPackage;
import pf.pf.Phenomenon;
import pf.pf.ProblemDiagram;
import pf.services.PfGrammarAccess;

@SuppressWarnings("all")
public class PfSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PfGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PfPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case PfPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case PfPackage.PHENOMENON:
				sequence_Phenomenon(context, (Phenomenon) semanticObject); 
				return; 
			case PfPackage.PROBLEM_DIAGRAM:
				sequence_ProblemDiagram(context, (ProblemDiagram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (from=[Node|ID] type=LinkType to=[Node|ID] (phenomena+=Phenomenon phenomena+=Phenomenon*)? description=STRING?)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=NodeType 
	 *         description=STRING? 
	 *         (hiddenPhenomena+=Phenomenon hiddenPhenomena+=Phenomenon*)? 
	 *         (subproblem+=ProblemDiagram | problemNodeRef+=[Node|ID] | problemRef+=[ProblemDiagram|ID] | href+=STRING)*
	 *     )
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Phenomenon returns Phenomenon
	 *
	 * Constraint:
	 *     (type=PhenomenonType? isControlled?='!'? name=ID description=STRING?)
	 */
	protected void sequence_Phenomenon(ISerializationContext context, Phenomenon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProblemDiagram returns ProblemDiagram
	 *
	 * Constraint:
	 *     (name=ID highlight=[Node|ID]? (nodes+=Node | links+=Link)*)
	 */
	protected void sequence_ProblemDiagram(ISerializationContext context, ProblemDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
